#include <Servo.h>

Servo X2; // X 축 서보모터
Servo X3; // Y 축 서보모터
Servo additionalServo; // 추가된 서보모터

// 로봇팔의 길이
const float L1 = 160.0; // X2와 X3 사이의 길이
const float L2 = 110.0; // X3와 공 사이의 길이

// 이전 좌표값 저장 변수
int prevX = 0;
int prevY = 0;

// 추가된 서보모터 각도
const int initialAngle = 0; // 초기 각도
const int finalAngle = 50; // 최종 각도

void setup() {
  X2.attach(2); // X2 서보모터를 핀 2에 연결
  X3.attach(4); // X3 서보모터를 핀 3에 연결
  additionalServo.attach(5); // 추가된 서보모터를 핀 4에 연결
  additionalServo.write(initialAngle); // 초기 각도로 설정
  Serial.begin(4800); // 시리얼 통신 시작 (속도는 4800으로 설정)
}

void loop() {
  if (Serial.available() > 0) {
    String data = Serial.readStringUntil('\n'); // 시리얼로부터 데이터 읽기
    int commaIndex = data.indexOf(','); // 쉼표 위치 찾기
    if (commaIndex != -1) { // 쉼표가 있는지 확인
      // 쉼표를 기준으로 X와 Y 좌표 값 분리
      int x_coord = data.substring(0, commaIndex).toInt();
      int y_coord = data.substring(commaIndex + 1).toInt();
      
      // 새로운 좌표값이 이전 좌표값과 다를 때만 모터를 제어
      if (x_coord != prevX || y_coord != prevY) {
        prevX = x_coord;
        prevY = y_coord;

        // 제2 코사인 법칙을 이용하여 각도 계산
        float L3 = sqrt(x_coord * x_coord + y_coord * y_coord); // 로봇팔 전체 길이 계산
        float phi2 = acos((L1 * L1 + L2 * L2 - L3 * L3) / (2 * L1 * L2)); // X3와 L3 사이의 각도 계산
        float theta2 = PI - phi2; // X3의 각도 계산
        float phi1 = atan2(y_coord, x_coord); // X2와 L3 사이의 각도 계산
        float theta1 = atan2(L2 * sin(theta2), (L1 + L2 * cos(theta2))); // X2의 각도 계산
        
        // 각도를 서보모터 값으로 변환
        int X2_angle = radiansToServo(theta1);
        int X3_angle = radiansToServo(theta2);

        // 각 서보모터를 제어하여 로봇팔을 움직임
        X2.write(X2_angle);
        X3.write(X3_angle);

        // 주황색 공이 감지된 경우 추가된 서보모터를 회전
        if (isOrangeBallClose()) {
          rotateAdditionalServo();
        }
      }
    }
  }
}

// 라디안을 서보모터 각도로 변환하는 함수
int radiansToServo(float radian) {
  return int((radian * 180.0) / PI);
}

// 주황색 공이 가까이 있는지 확인하는 함수
bool isOrangeBallClose() {
  // 주황색 공이 가까이 있는지 여부를 여기에 확인하는 코드를 작성
  // 예를 들어, 거리 측정 센서 등을 활용하여 구현할 수 있습니다.
  return true; // 일시적으로 항상 true를 반환하도록 설정
}

// 추가된 서보모터를 회전시키는 함수
void rotateAdditionalServo() {
  additionalServo.write(finalAngle); // 최종 각도로 회전
  delay(300); // 0.3초간 대기
  additionalServo.write(initialAngle); // 초기 각도로 회전
}
