import serial
import cv2
import numpy as np

cap = cv2.VideoCapture(0)
ser = serial.Serial("/dev/ttyACM0", 9600, timeout=2)

Xposition = 90

while True:
    _, frame = cap.read()
    frame = cv2.flip(frame, 1)
    frame = cv2.resize(frame, (640, 480))
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    red_lower = np.array([11, 100, 141], np.uint8)
    red_upper = np.array([30, 255, 255], np.uint8)
    mask = cv2.inRange(hsv, red_lower, red_upper)
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours = sorted(contours, key=lambda x: cv2.contourArea(x), reverse=True)

    if contours:
        cnt = contours[0]
        (x, _, _, _) = cv2.boundingRect(cnt)
        if x > 340:  # 조건을 변경하여 중앙에서 벗어난 정도를 더 정확히 측정합니다
            Xposition += 2
            ser.write((str(Xposition) + 'a').encode('utf-8'))
        elif x < 300:
            Xposition -= 2
            ser.write((str(Xposition) + 'a').encode('utf-8'))
        if cv2.contourArea(cnt) > 500:
            ser.write((str(Xposition) + 'a').encode('utf-8'))  # 데이터 전송 최적화





-----------------------------------------------------------------------------------------------
#include <Servo.h>

Servo X2;

char x;
long int v;
bool detected = false;
unsigned long lastDetectionTime = 0;

void setup() {
  X2.attach(2);
  Serial.begin(9600);
  X2.write(90);
}

void loop() {
  if (Serial.available() >= 3) { // 변경: 3 바이트 이상의 데이터를 수신할 때만 처리
    x = Serial.read();
    v = Serial.parseInt();
    if (x == 'a') {
      X2.write(v);
      detected = true;
      lastDetectionTime = millis();
    }
    delay(10);
  }

  if (detected && millis() - lastDetectionTime > 3000) {
    X2.write(90); // 3초 후 초기 위치로 이동
    detected = false;
  }
}
