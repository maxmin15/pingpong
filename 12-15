import serial
import time
import cv2
import numpy as np

cap = cv2.VideoCapture(0)
ser = serial.Serial("/dev/ttyACM0", '9600', timeout=2)

X2_position = 90
X3_position = 90

while True:
    _, frame = cap.read()
    frame = cv2.flip(frame, 1)
    frame = cv2.resize(frame, (640, 380))
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    orange_lower = np.array([11, 100, 141], np.uint8)
    orange_upper = np.array([30, 255, 255], np.uint8)
    mask = cv2.inRange(hsv, orange_lower, orange_upper)
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours = sorted(contours, key=lambda x: cv2.contourArea(x), reverse=True)
    rows, cols, _ = frame.shape
    center_x = int(rows / 2)
    center_y = int(cols / 2)

    for cnt in contours:
        (x, y, w, h) = cv2.boundingRect(cnt)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        medium_x = int((x + x + w) / 2)
        medium_y = int((y + y + h) / 2)

        cv2.line(frame, (medium_x, 0), (medium_x, 600), (0, 255, 0), 2)
        cv2.line(frame, (0, medium_y), (600, medium_y), (0, 255, 0), 2)

        if medium_x > center_x + 40:
            X2_position += 2
            ser.write((str(X2_position) + 'a').encode('utf-8'))
            time.sleep(0.03)

        if medium_x < center_x - 40:
            X2_position -= 2
            ser.write((str(X2_position) + 'a').encode('utf-8'))
            time.sleep(0.03)

        if w > some_threshold:  # You need to define some_threshold based on the actual size of the ball
            # Adjust X3 position based on ball size
            X3_position = 90 if X3_position == 0 else 0  # Toggle between 90 and 0 degrees
            ser.write((str(X3_position) + 'a').encode('utf-8'))
            time.sleep(0.03)

        break

    cv2.imshow("frame", frame)
    key = cv2.waitKey(1)
    if key == 27:
        break

cap.release()
cv2.destroyAllWindows()
