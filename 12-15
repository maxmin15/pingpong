import serial
import time
import cv2
import numpy as np

cap = cv2.VideoCapture(0)
ser = serial.Serial("/dev/ttyACM0", '9600', timeout=2)

Xposition = 90
Yposition = 90

while True:
    _, frame = cap.read()
    if frame is None:
        print("error.")
        continue

    frame = cv2.flip(frame, 1)
    frame = cv2.resize(frame, (640, 480))
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    red_lower = np.array([11, 100, 141], np.uint8)
    red_upper = np.array([30, 255, 255], np.uint8)
    mask = cv2.inRange(hsv, red_lower, red_upper)
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours = sorted(contours, key=lambda x: cv2.contourArea(x), reverse=True)
    rows, cols, _ = frame.shape
    center_x = int(rows / 2)
    center_y = int(cols / 2)

    # 기존 2번 핀의 모터 동작 코드
    for cnt in contours:
        (x, y, w, h) = cv2.boundingRect(cnt)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        text = "x = "+str(x)+"y = "+str(y)
        cv2.putText(frame, text, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (0, 0, 255))
        medium_x = int((x + x+w)/2)

        if medium_x > center_x + 40:
            Xposition += 2
            ser.write((str(Xposition) + 'a').encode('utf-8'))
        elif medium_x < center_x - 40:
            Xposition -= 2
            ser.write((str(Xposition) + 'a').encode('utf-8'))

        # 추가된 부분: 공의 바운딩 박스 넓이에 따라 3번 핀의 모터 제어
        bounding_box_area = w * h
        threshold_area = 1000  # 실험을 통해 조절
        if bounding_box_area > threshold_area:
            # Assuming 70 degrees is the desired angle for servo on pin 3
            ser.write(b'70b')
            time.sleep(1)  # 원하는 대로 조절 가능

        break

    cv2.imshow("frame", frame)
    key = cv2.waitKey(1)
    if key == 27:
        break

cap.release()
cv2.destroyAllWindows()
