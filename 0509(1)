import serial
import cv2
import numpy as np
import threading
import time

# 이미지 처리 스레드 클래스
class ImageProcessingThread(threading.Thread):
    def __init__(self, cap, ser, servo_delay):
        threading.Thread.__init__(self)
        self.cap = cap
        self.ser = ser
        self.servo_delay = servo_delay
        self.last_detection_time = time.time()

    def run(self):
        while True:
            _, frame = self.cap.read()
            frame = cv2.flip(frame, 1)
            frame = cv2.resize(frame, (640, 480))
            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
            orange_lower = np.array([0, 100, 100], np.uint8)
            orange_upper = np.array([20, 255, 255], np.uint8)
            mask = cv2.inRange(hsv, orange_lower, orange_upper)
            contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
            contours = sorted(contours, key=lambda x: cv2.contourArea(x), reverse=True)

            if len(contours) > 0:
                cnt = contours[0]
                (x, y, w, h) = cv2.boundingRect(cnt)
                center_x = x + w // 2
                center_y = y + h // 2
                coordinate = "{},{}\n".format(center_x, center_y)
                self.ser.write(coordinate.encode())
                self.last_detection_time = time.time()  # 감지된 시간 업데이트

    def stop_servo(self):
        # 추가된 서보모터를 0도로 돌려주는 함수
        self.ser.write(b"0\n")

# 시리얼 통신 설정
ser = serial.Serial("/dev/ttyACM0", 4800, timeout=2)

# 카메라 설정
cap = cv2.VideoCapture(0)

# 추가된 서보모터의 움직임 지연 시간
servo_delay = 0.3  # 초 단위

# 이미지 처리 스레드 시작
image_thread = ImageProcessingThread(cap, ser, servo_delay)
image_thread.start()

while True:
    if time.time() - image_thread.last_detection_time > 5:
        # 주황색 공이 5초 동안 감지되지 않으면 추가된 서보모터 멈추기
        image_thread.stop_servo()
        time.sleep(5)  # 5초 동안 멈춤

# 메인 스레드 종료 대기
image_thread.join()

# 리소스 해제
cap.release()
cv2.destroyAllWindows()

// 라디안을 서보모터 각도로 변환하는 함수
int radiansToServo(float radian) {
  return int((radian * 180.0) / PI);
}
