	import serial
	import cv2
	import numpy as np
	import threading
	
	# 이미지 처리 스레드 클래스
	class ImageProcessingThread(threading.Thread):
	    def __init__(self, cap, ser):
	        threading.Thread.__init__(self)
	        self.cap = cap
	        self.ser = ser
	        self.Xposition = 90
	
	    def run(self):
	        while True:
	            _, frame = self.cap.read()
	            frame = cv2.flip(frame, 1)
	            frame = cv2.resize(frame, (640, 480))
	            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
	            red_lower = np.array([11, 100, 141], np.uint8)
	            red_upper = np.array([30, 255, 255], np.uint8)
	            mask = cv2.inRange(hsv, red_lower, red_upper)
	            contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
	            contours = sorted(contours, key=lambda x: cv2.contourArea(x), reverse=True)
	
	            for cnt in contours:
	                (x, y, w, h) = cv2.boundingRect(cnt)
	                medium_x = int((x + x+w)/2)
	
	                if medium_x > 320 + 40:
	                    self.Xposition += 2
	                    self.ser.write((str(self.Xposition) + '\n').encode('utf-8'))
	                if medium_x < 320 - 40:
	                    self.Xposition -= 2
	                    self.ser.write((str(self.Xposition) + '\n').encode('utf-8'))
	
	                break
	
	# 시리얼 통신 스레드 함수
	def serial_thread(ser):
	    while True:
	        # 시리얼 통신 코드 작성
	        pass
	
	if __name__ == "__main__":
	    cap = cv2.VideoCapture(0)
	    ser = serial.Serial("/dev/ttyACM0", 4800, timeout=2)
	
	    image_thread = ImageProcessingThread(cap, ser)
	    image_thread.start()
	
	    serial_thread = threading.Thread(target=serial_thread, args=(ser,))
	    serial_thread.start()
	
	    image_thread.join()
	    serial_thread.join()
	
	    cap.release()
    cv2.destroyAllWindows()

------------------------------------------------
	

	#include <Servo.h>
	
	Servo X2;
	
	void setup() {
	  X2.attach(2);
	  Serial.begin(4800);  // 시리얼 통신 속도 변경
	}
	
	void loop() {
	  if (Serial.available() > 0) {
	    char receivedChar = Serial.read();
	    if (receivedChar == '\n') {
	      String dataString = Serial.readStringUntil('\n');
	      int motorPosition = dataString.toInt();
	      X2.write(motorPosition);
	    }
	  }
	}




--------------------------------------------------------
	#include <Servo.h>
	
	Servo X2;
	Servo X3;
	
	char x;
	long int v;
	bool detected = false;
	unsigned long lastDetectionTime = 0;
	
	void setup() {
	  X2.attach(2);
	  X3.attach(3); // X3 모터를 핀 3에 연결
	  Serial.begin(4800);  // 시리얼 통신 속도 변경
	  X2.write(90);
	  X3.write(90); // 초기 위치
	}
	
	void loop() {
	  unsigned long currentTime = millis(); // 현재 시간
	
	  if (Serial.available() > 2) {
	    x = Serial.read();
	    v = Serial.parseInt();
	    if (x == 'a') {
	      X2.write(v);
	      detected = true;
	      lastDetectionTime = currentTime; // 마지막 감지 시간 업데이트
	    }
	    delay(10);
	  }
	
	  // 공이 감지되었는지 및 마지막 감지 이후 충분한 시간이 지났는지 확인
	  if (detected && currentTime - lastDetectionTime > 3000) {
	    X3.write(140); // 50도로 이동
	    delay(1000); // 1초 대기
	    X3.write(90); // 초기 위치로 이동
	    detected = false; // 감지 플래그 재설정
	  }
}
